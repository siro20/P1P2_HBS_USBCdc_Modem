; Copyright (c) 2022 Patrick Rudolph
;
; SPDX-License-Identifier: BSD-3-Clause
;

.program twos_complement

; Alternates between the following two modes:
;
; 1) Pops one 8-bit integer from the input FIFO and calculate the twos complement.
;    Pushes it to the output FIFO.
;
; 2) Pops one 8-bit integer from the input FIFO and pushes it unmodified to the
;    output FIFO.
;
; To be used with an ADC in RR mode and DMA to negate the data of the second channel.
; This could be done in software as well, but requires CPU overhead that can be avoided,
; by this hardware only solution.

; Latency best case 29, worst case 36 cycles
; 
entry:
	; x = 7
	set x, 7
	; Get data from output FIFO
	pull block
next_0: ; 4 instructions per bit, +1/+2 on last bit
	; Get one bit from OSR
	out y, 1
	; Shift into ISR
	in y, 1
	; x--
	jmp x-- not_done_yet
	; At this point all bits have been shifted in
	; x = 0xff due to previous decrement
	; if (y > 0) jmp done
	jmp y-- done
	; x = 0
	set x, 0
	; jmp done
	jmp done
not_done_yet:
	; if (y == 0) jmp next_0; else next_invert
	jmp !y next_0

	; invert remaining bits
	mov osr, ~osr
next_invert: ; 3 instructions per bit, +1 on last bit
	; Get one bit from OSR
	out y, 1
	; Shift into ISR
	in y, 1
	; if (x--) jmp next_invert
	jmp x-- next_invert
	; x = 0xff due to previous decrement
done:
	; push high byte
	in x, 8

	; shift in 16 0s
	in null, 16
	; Push to input FIFO
	push block

	; Get second byte and don't do any modification
	; Latency 33 cycles
	pull block   [7]
	out y, 8     [7]
	in y, 8      [7]
	in null, 24  [7]
	push block

	jmp entry


% c-sdk {
static inline void twos_complement_program_init(PIO pio, uint sm, uint offset) {
	pio_sm_config c = twos_complement_program_get_default_config(offset);

	sm_config_set_in_shift(&c, true, false, 8);
	sm_config_set_out_shift(&c, true, false, 16);

	pio_sm_init(pio, sm, offset, &c);
	pio_sm_set_enabled(pio, sm, true);
}

static inline const volatile void *twos_complement_dma_rx_reg(PIO pio, uint sm) {
	return &pio->rxf[sm];
}

static inline volatile void *twos_complement_dma_tx_reg(PIO pio, uint sm) {
	return &pio->txf[sm];
}

static void __irq0_pio0_(void) {
	// This one wakes the CPU on WFE
	irq_clear(PIO0_IRQ_0);
}

static void __irq0_pio1_(void) {
	// This one wakes the CPU on WFE
	irq_clear(PIO1_IRQ_0);
}

static inline volatile void *twos_complement_prepare_irq0(PIO pio, uint sm) {
	int handler = (pio == pio0) ? PIO0_IRQ_0: PIO1_IRQ_0;

	// Prepare for IRQ support
	irq_set_exclusive_handler(handler, (pio == pio0) ? __irq0_pio0_ : __irq0_pio1_);
	irq_set_enabled(handler, true);
}

static inline volatile void *twos_complement_enable_irq0(PIO pio, uint sm) {
	pio_set_irq0_source_enabled(pio,
			(enum pio_interrupt_source)(pis_sm0_rx_fifo_not_empty + sm),
			true);
}

static inline volatile void *twos_complement_disable_irq0(PIO pio, uint sm) {
	pio_set_irq0_source_enabled(pio,
			(enum pio_interrupt_source)(pis_sm0_rx_fifo_not_empty + sm),
			false);
}
%}