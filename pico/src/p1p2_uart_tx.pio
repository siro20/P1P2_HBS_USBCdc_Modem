;
; Copyright (c) 2022 Patrick Rudolph
;
; SPDX-License-Identifier: BSD-3-Clause
;

.program p1p2_uart_tx

.side_set 2	; The two pins for an analog voltage but using two resistors

.define LEVEL_ONE       2 ; Analog voltage = 0.5 Vcc
.define LEVEL_IDLE      1 ; Same as ONE, but swapped (will be visible on oscilloscope)
.define LEVEL_ZERO_UP   3 ; Analog voltage = Vcc
.define LEVEL_ZERO_DOWN 0 ; Analog voltage = GND

; A P1P2 8n1 UART LSB first with parity 'even' transmit program.
;
; On the P1P2 bus:
; A "1" doesn't change line state, a "0" is send as + or - pulse (alternating).
; The spec says: The parity is even and flips on every "1" transmitted.
; PIO instruction space is limited to 32 Ops...
; To deal with limited instruction space, calculate parity on 0s and include the start bit
; in the calculation. This allows to encode the "0"s with AMI code at the same time.

public start:
next_byte:
    irq clear 0          side LEVEL_IDLE            ; clear IRQ while blocked
    pull block           side LEVEL_IDLE            ; send data bits until OSR empty

    ; send start bit
    irq set 0            side LEVEL_ZERO_UP    [7]  ; set IRQ while transmitting
    nop                  side LEVEL_IDLE       [5]  ; discard 24 bits to transmit 8 bits only

loop_odd:
    out y, 1             side LEVEL_IDLE            ; get next data bit 
    jmp !y, send_0_odd   side LEVEL_IDLE
send_1_odd:
    nop                  side LEVEL_ONE        [7]
    nop                  side LEVEL_IDLE       [3]
    jmp loop_end_odd     side LEVEL_IDLE            ; keep parity

send_0_odd:
    nop                  side LEVEL_ZERO_DOWN  [7]
    nop                  side LEVEL_IDLE       [3]
    jmp loop_end_even    side LEVEL_IDLE            ; toggle parity 

loop_even:
    out y, 1             side LEVEL_IDLE            ; get next data bit
    jmp !y, send_0_even  side LEVEL_IDLE
send_1_even:
    nop                  side LEVEL_ONE        [7]
    nop                  side LEVEL_IDLE       [3]
    jmp loop_end_even    side LEVEL_IDLE            ; keep parity
send_0_even:
    nop                  side LEVEL_ZERO_UP    [7]
    nop                  side LEVEL_IDLE       [3]
    jmp loop_end_odd     side LEVEL_IDLE            ; toggle parity 

loop_end_odd:
    jmp !osre, loop_odd  side LEVEL_IDLE
    nop                  side LEVEL_IDLE       [1]  ; finish idle phase of last bit
    nop                  side LEVEL_ZERO_DOWN  [7]  ; send '0' to make parity even
    nop                  side LEVEL_IDLE       [7]

    nop                  side LEVEL_ONE        [7]  ; send '1' as stop bit
    jmp next_byte        side LEVEL_IDLE       [4]  ; idle phase of stop bit, then jump

loop_end_even:
    jmp !osre, loop_even side LEVEL_IDLE
    nop                  side LEVEL_IDLE       [1]  ; finish idle phase of last bit
    nop                  side LEVEL_ONE        [7]  ; send '1' to keep parity even
    nop                  side LEVEL_IDLE       [7]

    nop                  side LEVEL_ONE        [7]  ; send '1' as stop bit
    jmp next_byte        side LEVEL_IDLE       [4]  ; idle phase of stop bit, then jump

% c-sdk {
#include "hardware/clocks.h"

static inline void p1p2_uart_tx_program_init(PIO pio, uint sm, uint offset, uint pin_tx, uint baud) {
    enum pio_interrupt_source isr;

    switch (sm) {
        case 0:
            isr = pis_interrupt0;
            break;
        case 1:
            isr = pis_interrupt1;
            break;
        case 2:
            isr = pis_interrupt2;
            break;
        case 3:
            isr = pis_interrupt3;
            break;
    }

    // Route pins to PIO
    pio_gpio_init(pio, pin_tx);
    pio_gpio_init(pio, pin_tx+1);

    // Disable pull on pins
    gpio_disable_pulls(pin_tx);
    gpio_disable_pulls(pin_tx+1);

    gpio_set_slew_rate(pin_tx, GPIO_SLEW_RATE_FAST);
    gpio_set_slew_rate(pin_tx+1, GPIO_SLEW_RATE_FAST);

    // Set pins to output
    pio_sm_set_consecutive_pindirs(pio, sm, pin_tx, 2, true/*output*/);

    pio_sm_config c = p1p2_uart_tx_program_get_default_config(offset);

    // OUT shifts to left, LSB first, no autopull
    sm_config_set_out_shift(&c, true, false, 8);

    // Set both pins as sideset pins
    sm_config_set_sideset_pins(&c, pin_tx);
    sm_config_set_sideset(&c, 2, false, false);

    // We only need TX, so get an 8-deep FIFO!
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    // SM transmits 1 bit per 16 execution cycles.
    float div = (float)clock_get_hz(clk_sys) / (16 * baud);
    sm_config_set_clkdiv(&c, div);

    // Clear IRQ flag before starting, and make sure flag doesn't actually
    // assert a system-level interrupt (we're using it as a status flag)
    pio_set_irq0_source_enabled(pio, isr, false);
    pio_set_irq1_source_enabled(pio, isr, false);
    pio_interrupt_clear(pio, sm);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

static inline void p1p2_uart_tx(PIO pio, uint sm, const uint8_t data) {
	pio_sm_put(pio, sm, data);
}

static inline volatile void *p1p2_uart_tx_reg(PIO pio, uint sm) {
	return &pio->txf[sm];
}

%}
